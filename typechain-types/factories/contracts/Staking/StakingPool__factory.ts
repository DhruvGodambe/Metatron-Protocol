/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  StakingPool,
  StakingPoolInterface,
} from "../../../contracts/Staking/StakingPool";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_stakingToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "_rewardToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_APY",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_stakingTimeConstant",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "required",
        type: "uint256",
      },
    ],
    name: "StakingPool__StakeFailed",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_rewardAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_timestamp",
        type: "uint256",
      },
    ],
    name: "RewardsClaimed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_timestamp",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "positionId",
        type: "uint256",
      },
    ],
    name: "Staked",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_timestamp",
        type: "uint256",
      },
    ],
    name: "Unstake",
    type: "event",
  },
  {
    inputs: [],
    name: "APY",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "PRECISION_CONSTANT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_account",
        type: "address",
      },
    ],
    name: "getReward",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "rewards",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "stake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "stakingTimeConstant",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "stakingToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "userPositions",
    outputs: [
      {
        internalType: "uint256",
        name: "positionId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "startTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "endTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenStakedAmount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_positionId",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60c060405234801561001057600080fd5b506040516107d03803806107d083398101604081905261002f91610080565b600180546001600160a01b031916331790556001600160a01b039384166080529190921660a0526004919091556005556100c3565b80516001600160a01b038116811461007b57600080fd5b919050565b6000806000806080858703121561009657600080fd5b61009f85610064565b93506100ad60208601610064565b6040860151606090960151949790965092505050565b60805160a0516106da6100f660003960006101b70152600081816101350152818161028f01526104de01526106da6000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80638da5cb5b116100715780638da5cb5b1461016f578063a694fc3a14610182578063c00007b014610195578063ef8bd305146101a9578063f7c618c1146101b2578063fada2497146101d957600080fd5b80630700037d146100ae5780632e1a7d4d146100e15780633f63e763146100f45780635e1b4d99146100fd57806372f702f314610130575b600080fd5b6100ce6100bc3660046105de565b60036020526000908152604090205481565b6040519081526020015b60405180910390f35b6100f26100ef366004610600565b50565b005b6100ce61271081565b61011061010b366004610619565b6101e2565b6040805194855260208501939093529183015260608201526080016100d8565b6101577f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100d8565b600154610157906001600160a01b031681565b6100f2610190366004610600565b610228565b6100ce6101a33660046105de565b50600090565b6100ce60045481565b6101577f000000000000000000000000000000000000000000000000000000000000000081565b6100ce60055481565b600260205281600052604060002081815481106101fe57600080fd5b60009182526020909120600490910201805460018201546002830154600390930154919450925084565b600081116102725760405162461bcd60e51b81526020600482015260126024820152710616d6f756e742063616e6e6f7420626520360741b60448201526064015b60405180910390fd5b604051636eb1769f60e11b815233600482015230602482015281907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063dd62ed3e90604401602060405180830381865afa1580156102de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103029190610643565b101561039c5760405162461bcd60e51b815260206004820152605f60248201527f5374616b696e6720436f6e7472616374206973206e6f7420617070726f76656460448201527f20666f72207468697320546f6b656e206f7220617070726f76656420616d6f7560648201527f6e74206973206e6f7420657175616c20746f20676976656e20616d6f756e7400608482015260a401610269565b600080546001810190915560006040518060800160405280838152602001428152602001600554426103ce919061065c565b81526020908101859052336000908152600282526040808220805482518186028101860190935280835294955091939092849084015b8282101561045e578382906000526020600020906004020160405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201548152505081526020019060010190610404565b5050505090506000815111156104b95733600090815260026020818152604080842080546001818101835591865294839020875160049096020194855591860151918401919091558401519082015560608301516003909101555b6040516323b872dd60e01b8152336004820152306024820152604481018590526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af115801561052f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105539190610682565b9050806105765760405163f85d42e360e01b815260048101869052602401610269565b8385336001600160a01b03167fb4caaf29adda3eefee3ad552a8e85058589bf834c7466cae4ee58787f70589ed426040516105b391815260200190565b60405180910390a45050505050565b80356001600160a01b03811681146105d957600080fd5b919050565b6000602082840312156105f057600080fd5b6105f9826105c2565b9392505050565b60006020828403121561061257600080fd5b5035919050565b6000806040838503121561062c57600080fd5b610635836105c2565b946020939093013593505050565b60006020828403121561065557600080fd5b5051919050565b6000821982111561067d57634e487b7160e01b600052601160045260246000fd5b500190565b60006020828403121561069457600080fd5b815180151581146105f957600080fdfea2646970667358221220b82be1cc304e8861d0ae0ca30cdc796d5379352d7a0e6d8215b91d50285b84f264736f6c634300080d0033";

type StakingPoolConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakingPoolConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StakingPool__factory extends ContractFactory {
  constructor(...args: StakingPoolConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _stakingToken: PromiseOrValue<string>,
    _rewardToken: PromiseOrValue<string>,
    _APY: PromiseOrValue<BigNumberish>,
    _stakingTimeConstant: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<StakingPool> {
    return super.deploy(
      _stakingToken,
      _rewardToken,
      _APY,
      _stakingTimeConstant,
      overrides || {}
    ) as Promise<StakingPool>;
  }
  override getDeployTransaction(
    _stakingToken: PromiseOrValue<string>,
    _rewardToken: PromiseOrValue<string>,
    _APY: PromiseOrValue<BigNumberish>,
    _stakingTimeConstant: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _stakingToken,
      _rewardToken,
      _APY,
      _stakingTimeConstant,
      overrides || {}
    );
  }
  override attach(address: string): StakingPool {
    return super.attach(address) as StakingPool;
  }
  override connect(signer: Signer): StakingPool__factory {
    return super.connect(signer) as StakingPool__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakingPoolInterface {
    return new utils.Interface(_abi) as StakingPoolInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StakingPool {
    return new Contract(address, _abi, signerOrProvider) as StakingPool;
  }
}

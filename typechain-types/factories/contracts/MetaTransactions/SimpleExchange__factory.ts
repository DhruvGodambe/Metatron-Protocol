/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  SimpleExchange,
  SimpleExchangeInterface,
} from "../../../contracts/MetaTransactions/SimpleExchange";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_tokenAddress",
        type: "address",
      },
      {
        internalType: "contract MinimalForwarder",
        name: "forwarder",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "forwarder",
        type: "address",
      },
    ],
    name: "isTrustedForwarder",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "userDepositMapping",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b5060405161050538038061050583398101604081905261002f91610072565b6001600160a01b03908116608052600080546001600160a01b031916929091169190911790556100ac565b6001600160a01b038116811461006f57600080fd5b50565b6000806040838503121561008557600080fd5b82516100908161005a565b60208401519092506100a18161005a565b809150509250929050565b60805161043e6100c76000396000610249015261043e6000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80633ccfd60b1461005c578063572b6c05146100665780639d76ea581461008e578063b6b55f25146100b9578063d3251d7f146100cc575b600080fd5b6100646100fa565b005b610079610074366004610358565b610247565b60405190151581526020015b60405180910390f35b6000546100a1906001600160a01b031681565b6040516001600160a01b039091168152602001610085565b6100646100c7366004610388565b610279565b6100ec6100da366004610358565b60016020526000908152604090205481565b604051908152602001610085565b60006001600061010861030c565b6001600160a01b03166001600160a01b03168152602001908152602001600020549050600081116101775760405162461bcd60e51b81526020600482015260156024820152744e6f20616d6f756e7420746f20776974686472617760581b604482015260640160405180910390fd5b806001600061018461030c565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546101b391906103b7565b90915550506000546001600160a01b031663a9059cbb6101d161030c565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044015b6020604051808303816000875af115801561021f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024391906103ce565b5050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b806001600061028661030c565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546102b591906103f0565b90915550506000546001600160a01b03166323b872dd6102d361030c565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260448101849052606401610200565b600061031733610247565b15610329575060131936013560601c90565b610331610336565b905090565b600061034133610247565b15610353575060131936013560601c90565b503390565b60006020828403121561036a57600080fd5b81356001600160a01b038116811461038157600080fd5b9392505050565b60006020828403121561039a57600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b6000828210156103c9576103c96103a1565b500390565b6000602082840312156103e057600080fd5b8151801515811461038157600080fd5b60008219821115610403576104036103a1565b50019056fea26469706673582212200788008ccafaea0d1abf71402d7b88d2ed7c5e201423d7a3f478b204a5adb9d564736f6c634300080a0033";

type SimpleExchangeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SimpleExchangeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SimpleExchange__factory extends ContractFactory {
  constructor(...args: SimpleExchangeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _tokenAddress: PromiseOrValue<string>,
    forwarder: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SimpleExchange> {
    return super.deploy(
      _tokenAddress,
      forwarder,
      overrides || {}
    ) as Promise<SimpleExchange>;
  }
  override getDeployTransaction(
    _tokenAddress: PromiseOrValue<string>,
    forwarder: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _tokenAddress,
      forwarder,
      overrides || {}
    );
  }
  override attach(address: string): SimpleExchange {
    return super.attach(address) as SimpleExchange;
  }
  override connect(signer: Signer): SimpleExchange__factory {
    return super.connect(signer) as SimpleExchange__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SimpleExchangeInterface {
    return new utils.Interface(_abi) as SimpleExchangeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SimpleExchange {
    return new Contract(address, _abi, signerOrProvider) as SimpleExchange;
  }
}

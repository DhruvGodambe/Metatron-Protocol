/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Registry,
  RegistryInterface,
} from "../../../contracts/MetaTransactions/Registry";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract MinimalForwarder",
        name: "forwarder",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "who",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "name",
        type: "string",
      },
    ],
    name: "Registered",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "forwarder",
        type: "address",
      },
    ],
    name: "isTrustedForwarder",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "names",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    name: "owners",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
    ],
    name: "register",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b5060405161063438038061063483398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b6080516105a36100916000396000818160b201526102e201526105a36000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80632b1fd99514610051578063572b6c05146100a25780635cf3d346146100f2578063f2c298be14610112575b600080fd5b61008561005f3660046103d2565b80516020818301810180516001825292820191909301209152546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100e26100b0366004610483565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b6040519015158152602001610099565b610105610100366004610483565b610127565b60405161009991906104e3565b6101256101203660046103d2565b6101c1565b005b6000602081905290815260409020805461014090610516565b80601f016020809104026020016040519081016040528092919081815260200182805461016c90610516565b80156101b95780601f1061018e576101008083540402835291602001916101b9565b820191906000526020600020905b81548152906001019060200180831161019c57829003601f168201915b505050505081565b60006001600160a01b03166001826040516101dc9190610551565b908152604051908190036020019020546001600160a01b0316146102335760405162461bcd60e51b815260206004820152600a6024820152692730b6b2903a30b5b2b760b11b604482015260640160405180910390fd5b600061023d6102de565b9050806001836040516102509190610551565b908152604080516020928190038301902080546001600160a01b0319166001600160a01b03948516179055918316600090815280825291909120835161029892850190610323565b50806001600160a01b03167fb3eccf73f39b1c07947c780b2b39df2a1bb058b4037b0a42d0881ca1a028a132836040516102d291906104e3565b60405180910390a25050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633141561031e575060131936013560601c90565b503390565b82805461032f90610516565b90600052602060002090601f0160209004810192826103515760008555610397565b82601f1061036a57805160ff1916838001178555610397565b82800160010185558215610397579182015b8281111561039757825182559160200191906001019061037c565b506103a39291506103a7565b5090565b5b808211156103a357600081556001016103a8565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156103e457600080fd5b813567ffffffffffffffff808211156103fc57600080fd5b818401915084601f83011261041057600080fd5b813581811115610422576104226103bc565b604051601f8201601f19908116603f0116810190838211818310171561044a5761044a6103bc565b8160405282815287602084870101111561046357600080fd5b826020860160208301376000928101602001929092525095945050505050565b60006020828403121561049557600080fd5b81356001600160a01b03811681146104ac57600080fd5b9392505050565b60005b838110156104ce5781810151838201526020016104b6565b838111156104dd576000848401525b50505050565b60208152600082518060208401526105028160408501602087016104b3565b601f01601f19169190910160400192915050565b600181811c9082168061052a57607f821691505b6020821081141561054b57634e487b7160e01b600052602260045260246000fd5b50919050565b600082516105638184602087016104b3565b919091019291505056fea26469706673582212206745d82f925d8138d455dde021092ae70d190472c91ad2f06e92ea8bd3d6a75164736f6c634300080a0033";

type RegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Registry__factory extends ContractFactory {
  constructor(...args: RegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    forwarder: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Registry> {
    return super.deploy(forwarder, overrides || {}) as Promise<Registry>;
  }
  override getDeployTransaction(
    forwarder: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(forwarder, overrides || {});
  }
  override attach(address: string): Registry {
    return super.attach(address) as Registry;
  }
  override connect(signer: Signer): Registry__factory {
    return super.connect(signer) as Registry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RegistryInterface {
    return new utils.Interface(_abi) as RegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Registry {
    return new Contract(address, _abi, signerOrProvider) as Registry;
  }
}

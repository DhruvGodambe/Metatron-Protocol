/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface ERC721MintingFactoryInterface extends utils.Interface {
  functions: {
    "adminAddress()": FunctionFragment;
    "createNFTContract(string,string)": FunctionFragment;
    "exchangeAddress()": FunctionFragment;
    "getNFTsForOwner(address)": FunctionFragment;
    "getTotalNFTsMinted(address)": FunctionFragment;
    "mintNFT(address,string)": FunctionFragment;
    "nftToIdToOwner(address,uint256)": FunctionFragment;
    "nftToOwner(address)": FunctionFragment;
    "ownerToNFTs(address,uint256)": FunctionFragment;
    "updateExchangeAddress(address)": FunctionFragment;
    "updateOwner(address,uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "adminAddress"
      | "createNFTContract"
      | "exchangeAddress"
      | "getNFTsForOwner"
      | "getTotalNFTsMinted"
      | "mintNFT"
      | "nftToIdToOwner"
      | "nftToOwner"
      | "ownerToNFTs"
      | "updateExchangeAddress"
      | "updateOwner"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "adminAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createNFTContract",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNFTsForOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalNFTsMinted",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mintNFT",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "nftToIdToOwner",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "nftToOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerToNFTs",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateExchangeAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOwner",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "adminAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createNFTContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNFTsForOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalNFTsMinted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nftToIdToOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nftToOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerToNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateExchangeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOwner",
    data: BytesLike
  ): Result;

  events: {
    "ExchangeAddressChanged(address,address)": EventFragment;
    "NFTContractCreated(string,string,address)": EventFragment;
    "NFTMinted(address,uint256)": EventFragment;
    "OwnerUpdated(address,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ExchangeAddressChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTContractCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerUpdated"): EventFragment;
}

export interface ExchangeAddressChangedEventObject {
  oldExchange: string;
  newExchange: string;
}
export type ExchangeAddressChangedEvent = TypedEvent<
  [string, string],
  ExchangeAddressChangedEventObject
>;

export type ExchangeAddressChangedEventFilter =
  TypedEventFilter<ExchangeAddressChangedEvent>;

export interface NFTContractCreatedEventObject {
  name: string;
  symbol: string;
  nftContract: string;
}
export type NFTContractCreatedEvent = TypedEvent<
  [string, string, string],
  NFTContractCreatedEventObject
>;

export type NFTContractCreatedEventFilter =
  TypedEventFilter<NFTContractCreatedEvent>;

export interface NFTMintedEventObject {
  nftContract: string;
  tokenId: BigNumber;
}
export type NFTMintedEvent = TypedEvent<
  [string, BigNumber],
  NFTMintedEventObject
>;

export type NFTMintedEventFilter = TypedEventFilter<NFTMintedEvent>;

export interface OwnerUpdatedEventObject {
  nftContract: string;
  tokenId: BigNumber;
  newOwner: string;
}
export type OwnerUpdatedEvent = TypedEvent<
  [string, BigNumber, string],
  OwnerUpdatedEventObject
>;

export type OwnerUpdatedEventFilter = TypedEventFilter<OwnerUpdatedEvent>;

export interface ERC721MintingFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ERC721MintingFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    adminAddress(overrides?: CallOverrides): Promise<[string]>;

    createNFTContract(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exchangeAddress(overrides?: CallOverrides): Promise<[string]>;

    getNFTsForOwner(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getTotalNFTsMinted(
      _nftContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    mintNFT(
      _nftContract: PromiseOrValue<string>,
      _tokenURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nftToIdToOwner(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    nftToOwner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    ownerToNFTs(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    updateExchangeAddress(
      _newExchange: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateOwner(
      _nftContract: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  adminAddress(overrides?: CallOverrides): Promise<string>;

  createNFTContract(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exchangeAddress(overrides?: CallOverrides): Promise<string>;

  getNFTsForOwner(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getTotalNFTsMinted(
    _nftContract: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  mintNFT(
    _nftContract: PromiseOrValue<string>,
    _tokenURI: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nftToIdToOwner(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  nftToOwner(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  ownerToNFTs(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  updateExchangeAddress(
    _newExchange: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateOwner(
    _nftContract: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    adminAddress(overrides?: CallOverrides): Promise<string>;

    createNFTContract(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    exchangeAddress(overrides?: CallOverrides): Promise<string>;

    getNFTsForOwner(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getTotalNFTsMinted(
      _nftContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintNFT(
      _nftContract: PromiseOrValue<string>,
      _tokenURI: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    nftToIdToOwner(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    nftToOwner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    ownerToNFTs(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    updateExchangeAddress(
      _newExchange: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateOwner(
      _nftContract: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ExchangeAddressChanged(address,address)"(
      oldExchange?: null,
      newExchange?: null
    ): ExchangeAddressChangedEventFilter;
    ExchangeAddressChanged(
      oldExchange?: null,
      newExchange?: null
    ): ExchangeAddressChangedEventFilter;

    "NFTContractCreated(string,string,address)"(
      name?: null,
      symbol?: null,
      nftContract?: null
    ): NFTContractCreatedEventFilter;
    NFTContractCreated(
      name?: null,
      symbol?: null,
      nftContract?: null
    ): NFTContractCreatedEventFilter;

    "NFTMinted(address,uint256)"(
      nftContract?: null,
      tokenId?: null
    ): NFTMintedEventFilter;
    NFTMinted(nftContract?: null, tokenId?: null): NFTMintedEventFilter;

    "OwnerUpdated(address,uint256,address)"(
      nftContract?: null,
      tokenId?: null,
      newOwner?: null
    ): OwnerUpdatedEventFilter;
    OwnerUpdated(
      nftContract?: null,
      tokenId?: null,
      newOwner?: null
    ): OwnerUpdatedEventFilter;
  };

  estimateGas: {
    adminAddress(overrides?: CallOverrides): Promise<BigNumber>;

    createNFTContract(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exchangeAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getNFTsForOwner(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalNFTsMinted(
      _nftContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintNFT(
      _nftContract: PromiseOrValue<string>,
      _tokenURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nftToIdToOwner(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nftToOwner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerToNFTs(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateExchangeAddress(
      _newExchange: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateOwner(
      _nftContract: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    adminAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createNFTContract(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exchangeAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNFTsForOwner(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalNFTsMinted(
      _nftContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintNFT(
      _nftContract: PromiseOrValue<string>,
      _tokenURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nftToIdToOwner(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nftToOwner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerToNFTs(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateExchangeAddress(
      _newExchange: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateOwner(
      _nftContract: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

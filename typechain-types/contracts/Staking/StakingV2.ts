/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface StakingV2Interface extends utils.Interface {
  functions: {
    "APY()": FunctionFragment;
    "PRECISION_CONSTANT()": FunctionFragment;
    "REWARD_CONSTANT()": FunctionFragment;
    "STAKING_MONTHS()": FunctionFragment;
    "UserInfo(address,uint256)": FunctionFragment;
    "_calculateRewards(uint256)": FunctionFragment;
    "adminRegistry()": FunctionFragment;
    "claimReward(address,uint256)": FunctionFragment;
    "getPendingRewardsInfo(address,uint256)": FunctionFragment;
    "getStakedInfo(address,uint256)": FunctionFragment;
    "initialize(address,address,uint256,uint256,address)": FunctionFragment;
    "maxUnclaimableToken()": FunctionFragment;
    "oneMonthTimeConstant()": FunctionFragment;
    "pause()": FunctionFragment;
    "pauseStatus()": FunctionFragment;
    "paused()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "rewardToken()": FunctionFragment;
    "setRewardConstant(uint256)": FunctionFragment;
    "stake(address,uint256,uint256)": FunctionFragment;
    "stakingToken()": FunctionFragment;
    "unpause()": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "APY"
      | "PRECISION_CONSTANT"
      | "REWARD_CONSTANT"
      | "STAKING_MONTHS"
      | "UserInfo"
      | "_calculateRewards"
      | "adminRegistry"
      | "claimReward"
      | "getPendingRewardsInfo"
      | "getStakedInfo"
      | "initialize"
      | "maxUnclaimableToken"
      | "oneMonthTimeConstant"
      | "pause"
      | "pauseStatus"
      | "paused"
      | "proxiableUUID"
      | "rewardToken"
      | "setRewardConstant"
      | "stake"
      | "stakingToken"
      | "unpause"
      | "upgradeTo"
      | "upgradeToAndCall"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "APY", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PRECISION_CONSTANT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REWARD_CONSTANT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STAKING_MONTHS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UserInfo",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "_calculateRewards",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "adminRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingRewardsInfo",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakedInfo",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "maxUnclaimableToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oneMonthTimeConstant",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauseStatus",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardConstant",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(functionFragment: "APY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PRECISION_CONSTANT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REWARD_CONSTANT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STAKING_MONTHS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "UserInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_calculateRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingRewardsInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakedInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxUnclaimableToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oneMonthTimeConstant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardConstant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "NFTStaked(address,uint256,uint256,uint256)": EventFragment;
    "Paused(address)": EventFragment;
    "RewardsClaimed(address,uint256,uint256,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTStaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface NFTStakedEventObject {
  user: string;
  tokenId: BigNumber;
  nftValue: BigNumber;
  timestamp: BigNumber;
}
export type NFTStakedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  NFTStakedEventObject
>;

export type NFTStakedEventFilter = TypedEventFilter<NFTStakedEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RewardsClaimedEventObject {
  _user: string;
  _stakedTokenId: BigNumber;
  _rewardAmount: BigNumber;
  _timestamp: BigNumber;
}
export type RewardsClaimedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  RewardsClaimedEventObject
>;

export type RewardsClaimedEventFilter = TypedEventFilter<RewardsClaimedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface StakingV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StakingV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    APY(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRECISION_CONSTANT(overrides?: CallOverrides): Promise<[BigNumber]>;

    REWARD_CONSTANT(overrides?: CallOverrides): Promise<[BigNumber]>;

    STAKING_MONTHS(overrides?: CallOverrides): Promise<[BigNumber]>;

    UserInfo(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        stakingTimestamp: BigNumber;
        NFTvalue: BigNumber;
        totalClaimableRewards: BigNumber;
        claimedRewards: BigNumber;
        rewardInstallment: BigNumber;
        lastWithdrawalTime: BigNumber;
        lastRewardAccumulatedTime: BigNumber;
      }
    >;

    _calculateRewards(
      _nftValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    adminRegistry(overrides?: CallOverrides): Promise<[string]>;

    claimReward(
      _user: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getPendingRewardsInfo(
      _user: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getStakedInfo(
      _user: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]
    >;

    initialize(
      _stakingToken: PromiseOrValue<string>,
      _rewardToken: PromiseOrValue<string>,
      _interestRate: PromiseOrValue<BigNumberish>,
      _stakingPeriod: PromiseOrValue<BigNumberish>,
      _adminRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    maxUnclaimableToken(overrides?: CallOverrides): Promise<[BigNumber]>;

    oneMonthTimeConstant(overrides?: CallOverrides): Promise<[BigNumber]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pauseStatus(overrides?: CallOverrides): Promise<[boolean]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    setRewardConstant(
      _rewardConstant: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stake(
      _user: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _nftValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakingToken(overrides?: CallOverrides): Promise<[string]>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  APY(overrides?: CallOverrides): Promise<BigNumber>;

  PRECISION_CONSTANT(overrides?: CallOverrides): Promise<BigNumber>;

  REWARD_CONSTANT(overrides?: CallOverrides): Promise<BigNumber>;

  STAKING_MONTHS(overrides?: CallOverrides): Promise<BigNumber>;

  UserInfo(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      stakingTimestamp: BigNumber;
      NFTvalue: BigNumber;
      totalClaimableRewards: BigNumber;
      claimedRewards: BigNumber;
      rewardInstallment: BigNumber;
      lastWithdrawalTime: BigNumber;
      lastRewardAccumulatedTime: BigNumber;
    }
  >;

  _calculateRewards(
    _nftValue: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  adminRegistry(overrides?: CallOverrides): Promise<string>;

  claimReward(
    _user: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getPendingRewardsInfo(
    _user: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStakedInfo(
    _user: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]
  >;

  initialize(
    _stakingToken: PromiseOrValue<string>,
    _rewardToken: PromiseOrValue<string>,
    _interestRate: PromiseOrValue<BigNumberish>,
    _stakingPeriod: PromiseOrValue<BigNumberish>,
    _adminRegistry: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  maxUnclaimableToken(overrides?: CallOverrides): Promise<BigNumber>;

  oneMonthTimeConstant(overrides?: CallOverrides): Promise<BigNumber>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pauseStatus(overrides?: CallOverrides): Promise<boolean>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  setRewardConstant(
    _rewardConstant: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stake(
    _user: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _nftValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakingToken(overrides?: CallOverrides): Promise<string>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    APY(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION_CONSTANT(overrides?: CallOverrides): Promise<BigNumber>;

    REWARD_CONSTANT(overrides?: CallOverrides): Promise<BigNumber>;

    STAKING_MONTHS(overrides?: CallOverrides): Promise<BigNumber>;

    UserInfo(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        stakingTimestamp: BigNumber;
        NFTvalue: BigNumber;
        totalClaimableRewards: BigNumber;
        claimedRewards: BigNumber;
        rewardInstallment: BigNumber;
        lastWithdrawalTime: BigNumber;
        lastRewardAccumulatedTime: BigNumber;
      }
    >;

    _calculateRewards(
      _nftValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    adminRegistry(overrides?: CallOverrides): Promise<string>;

    claimReward(
      _user: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getPendingRewardsInfo(
      _user: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakedInfo(
      _user: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]
    >;

    initialize(
      _stakingToken: PromiseOrValue<string>,
      _rewardToken: PromiseOrValue<string>,
      _interestRate: PromiseOrValue<BigNumberish>,
      _stakingPeriod: PromiseOrValue<BigNumberish>,
      _adminRegistry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    maxUnclaimableToken(overrides?: CallOverrides): Promise<BigNumber>;

    oneMonthTimeConstant(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: CallOverrides): Promise<void>;

    pauseStatus(overrides?: CallOverrides): Promise<boolean>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    setRewardConstant(
      _rewardConstant: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stake(
      _user: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _nftValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stakingToken(overrides?: CallOverrides): Promise<string>;

    unpause(overrides?: CallOverrides): Promise<void>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "NFTStaked(address,uint256,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      nftValue?: null,
      timestamp?: null
    ): NFTStakedEventFilter;
    NFTStaked(
      user?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      nftValue?: null,
      timestamp?: null
    ): NFTStakedEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "RewardsClaimed(address,uint256,uint256,uint256)"(
      _user?: PromiseOrValue<string> | null,
      _stakedTokenId?: null,
      _rewardAmount?: null,
      _timestamp?: null
    ): RewardsClaimedEventFilter;
    RewardsClaimed(
      _user?: PromiseOrValue<string> | null,
      _stakedTokenId?: null,
      _rewardAmount?: null,
      _timestamp?: null
    ): RewardsClaimedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
  };

  estimateGas: {
    APY(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION_CONSTANT(overrides?: CallOverrides): Promise<BigNumber>;

    REWARD_CONSTANT(overrides?: CallOverrides): Promise<BigNumber>;

    STAKING_MONTHS(overrides?: CallOverrides): Promise<BigNumber>;

    UserInfo(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _calculateRewards(
      _nftValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    adminRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    claimReward(
      _user: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getPendingRewardsInfo(
      _user: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakedInfo(
      _user: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _stakingToken: PromiseOrValue<string>,
      _rewardToken: PromiseOrValue<string>,
      _interestRate: PromiseOrValue<BigNumberish>,
      _stakingPeriod: PromiseOrValue<BigNumberish>,
      _adminRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    maxUnclaimableToken(overrides?: CallOverrides): Promise<BigNumber>;

    oneMonthTimeConstant(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pauseStatus(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    setRewardConstant(
      _rewardConstant: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stake(
      _user: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _nftValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakingToken(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    APY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRECISION_CONSTANT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REWARD_CONSTANT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    STAKING_MONTHS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UserInfo(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _calculateRewards(
      _nftValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    adminRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimReward(
      _user: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getPendingRewardsInfo(
      _user: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakedInfo(
      _user: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _stakingToken: PromiseOrValue<string>,
      _rewardToken: PromiseOrValue<string>,
      _interestRate: PromiseOrValue<BigNumberish>,
      _stakingPeriod: PromiseOrValue<BigNumberish>,
      _adminRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    maxUnclaimableToken(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oneMonthTimeConstant(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pauseStatus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setRewardConstant(
      _rewardConstant: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      _user: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _nftValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
